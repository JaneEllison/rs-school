!function(Q){var B={};function n(F){if(B[F])return B[F].exports;var e=B[F]={i:F,l:!1,exports:{}};return Q[F].call(e.exports,e,e.exports,n),e.l=!0,e.exports}n.m=Q,n.c=B,n.d=function(Q,B,F){n.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:F})},n.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},n.t=function(Q,B){if(1&B&&(Q=n(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var F=Object.create(null);if(n.r(F),Object.defineProperty(F,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var e in Q)n.d(F,e,function(B){return Q[B]}.bind(null,e));return F},n.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return n.d(B,"a",B),B},n.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},n.p="",n(n.s=2)}([function(module,exports,__webpack_require__){eval("module.exports = __webpack_require__(1);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/YTM0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIsbUJBQU8sQ0FBQyxDQUFxQiIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    "GeneratorFunction"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : undefined\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./styles/scss/main.scss\n// extracted by mini-css-extract-plugin\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(0);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n// CONCATENATED MODULE: ./js/components/map.js\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar leaflet = window.L;\nvar covidMap = leaflet.map('mapid').setView([0, 0], 2);\nvar isCovidInfo = true;\nvar covidControl = document.querySelector('.map__control');\nvar attribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors';\nvar tileLayerUrl = 'https://cartodb-basemaps-{s}.global.ssl.fastly.net/light_all/{z}/{x}/{y}.png';\nvar tiles = leaflet.tileLayer(tileLayerUrl, {\n  attribution: attribution\n});\ntiles.addTo(covidMap);\n\nvar createMarkerUi = function createMarkerUi(width, height) {\n  var covidMarker = leaflet.icon({\n    iconUrl: isCovidInfo ? '../assets/images/covid-marker1.png' : '../assets/images/covid-marker2.png',\n    iconSize: [width, height],\n    iconAnchor: [25, 16],\n    className: 'marker_img'\n  });\n  return covidMarker;\n};\n\nvar geoCovidMarker = function geoCovidMarker(covidApiData) {\n  var geoFormat = {\n    type: 'FeatureCollection',\n    features: covidApiData.map(function (element) {\n      var countryInfo = element.countryInfo;\n      var lat = countryInfo.lat,\n          _long = countryInfo[\"long\"];\n\n      if (element.cases > 400000 && element.cases < 900000) {\n        var covidIcon = createMarkerUi(60, 50);\n        leaflet.marker([lat, _long], {\n          icon: covidIcon\n        }).addTo(covidMap);\n      }\n\n      if (element.cases < 400000) {\n        var _covidIcon = createMarkerUi(20, 15);\n\n        leaflet.marker([lat, _long], {\n          icon: _covidIcon\n        }).addTo(covidMap);\n      }\n\n      if (element.cases > 900000) {\n        var _covidIcon2 = createMarkerUi(100, 90);\n\n        leaflet.marker([lat, _long], {\n          icon: _covidIcon2\n        }).addTo(covidMap);\n      }\n\n      var covidGeoInf = {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [_long, lat]\n        },\n        properties: _objectSpread({}, element)\n      };\n      return covidGeoInf;\n    })\n  };\n  return geoFormat;\n};\n\nvar createPopupCovid = function createPopupCovid(geoFeature) {\n  var geoJsonPoint = new leaflet.GeoJSON(geoFeature, {\n    pointToLayer: function pointToLayer(covidGeoInf, coordinates) {\n      var properties = covidGeoInf.properties;\n      var population = properties.population,\n          country = properties.country,\n          cases = properties.cases,\n          deaths = properties.deaths,\n          recovered = properties.recovered,\n          todayCases = properties.todayCases,\n          todayDeaths = properties.todayDeaths,\n          todayRecovered = properties.todayRecovered,\n          casesPerOneMillion = properties.casesPerOneMillion,\n          recoveredPerOneMillion = properties.recoveredPerOneMillion,\n          deathsPerOneMillion = properties.deathsPerOneMillion;\n      var marker = leaflet.marker(coordinates, {\n        icon: leaflet.divIcon({\n          className: 'markerPopup',\n          html: \"\".concat(isCovidInfo ? \"<div class=\\\"covid__container\\\">\\n              <div class=\\\"covid__content\\\">\\n                <h2 class=\\\"covid__country\\\">\".concat(country, \":</h2>\\n                <div>\\n                  <span><h3 class=\\\"covid__info\\\">Population: \").concat(population, \" </h3></span>\\n                  <span><h3 class=\\\"covid__info\\\">TotalConfirmed: \").concat(cases, \" </h3></span>\\n                  <span><h3 class=\\\"covid__info\\\">TotalDeaths: \").concat(deaths, \"</h3></span>\\n                  <span><h3 class=\\\"covid__info\\\">TotalRecovered: \").concat(recovered, \"</h3></span>\\n                </div>\\n              </div>\\n            </div>\") : \"<div class=\\\"covid__container\\\">\\n              <div class=\\\"covid__content\\\">\\n                <h2 class=\\\"covid__country\\\">\".concat(country, \":</h2>\\n                <div>\\n                  <span><h3 class=\\\"covid__info\\\">TodayConfirmed: \").concat(todayCases, \" </h3></span>\\n                  <span><h3 class=\\\"covid__info\\\">TodayDeaths: \").concat(todayDeaths, \" </h3></span>\\n                  <span><h3 class=\\\"covid__info\\\">TodayRecovered: \").concat(todayRecovered, \" </h3></span>\\n                  <span><h3 class=\\\"covid__info\\\">Per100 Corfirmed: \").concat(Math.round(casesPerOneMillion / 10), \" </h3></span>\\n                  <span><h3 class=\\\"covid__info\\\">Per100 Recovered: \").concat(Math.round(recoveredPerOneMillion / 10), \" </h3></span>\\n                  <span><h3 class=\\\"covid__info\\\">Per100 Deaths: \").concat(Math.round(deathsPerOneMillion / 10), \" </h3></span>\\n                </div>\\n              </div>\\n            </div>\"))\n        }),\n        riseOnHover: true\n      });\n      return marker;\n    }\n  });\n  geoJsonPoint.addTo(covidMap);\n};\n\nvar covidData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    var response, covidApiData, geoFeature;\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('https://corona.lmao.ninja/v2/countries');\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            covidApiData = _context.sent;\n            geoFeature = geoCovidMarker(covidApiData);\n            createPopupCovid(geoFeature);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function covidData() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar covidControlAction = function covidControlAction(event) {\n  if (event.target.getAttribute('class').slice(-7) === 'control') return;\n  var markerPopup = document.querySelectorAll('.markerPopup');\n  var markerImg = document.querySelectorAll('.marker_img');\n  var activeBtn = document.querySelector('.actual');\n  markerImg.forEach(function (el) {\n    el.remove();\n  });\n  markerPopup.forEach(function (el) {\n    el.remove();\n  });\n\n  if (event.target.getAttribute('class').slice(-5) === 'total') {\n    isCovidInfo = true;\n    covidData();\n  }\n\n  if (event.target.getAttribute('class').slice(-5) === 'today') {\n    isCovidInfo = false;\n    covidData();\n  }\n\n  if (activeBtn !== null) {\n    activeBtn.classList.remove('actual');\n  }\n\n  event.target.classList.add('actual');\n};\n\ncovidMap.addControl(new leaflet.Control.Fullscreen());\ncovidData();\ncovidControl.addEventListener('click', function (event) {\n  return covidControlAction(event);\n});\n// CONCATENATED MODULE: ./js/components/table.js\n\n\nvar countries = document.querySelector('.countries');\nvar table = document.querySelector('.table');\nvar fullscreenTableBtn = document.querySelector('.fullscreen__table');\nvar countryFlag = document.querySelector('.country__flag');\nvar countryName = document.querySelector('.country__name');\nvar tableConfirmed = document.querySelector('.table__confirmed');\nvar tableDeath = document.querySelector('.table__death');\nvar tableRecovered = document.querySelector('.table__recovered');\nvar tableSwitherDays = document.querySelector('.table__swither_days');\nvar arrowLeftDays = document.querySelector('.arrow__left_days');\nvar tableGlobal = document.querySelector('.table__global');\nvar tableDaily = document.querySelector('.table__daily');\nvar arrowRightDays = document.querySelector('.arrow__right_days');\nvar tableSwitherCount = document.querySelector('.table__swither_count');\nvar arrowLeftCount = document.querySelector('.arrow__left_count');\nvar tableAll = document.querySelector('.table__all');\nvar tablePer100 = document.querySelector('.table__per100');\nvar arrowRightCount = document.querySelector('.arrow__right_count');\nvar totalBtn = document.querySelector('.total__btn');\nvar countryCasesData;\nvar allCasesData;\nvar isGlobalCasesMode = true;\nvar isAllCasesMode = true;\nvar currentCountry;\nvar currentCountryData;\nvar isCountryMode;\nvar worldPopulationPer100 = 78270;\n\nvar getData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('https://corona.lmao.ninja/v2/countries').then(function (res) {\n              return res.json();\n            });\n\n          case 2:\n            countryCasesData = _context.sent;\n            _context.next = 5;\n            return fetch('https://api.covid19api.com/summary').then(function (res) {\n              return res.json();\n            });\n\n          case 5:\n            allCasesData = _context.sent;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getData() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getInfoTable = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n    var confirmed, death, recovered;\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getData();\n\n          case 2:\n            if (!isCountryMode) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 4:\n            if (isGlobalCasesMode && isAllCasesMode) {\n              confirmed = allCasesData.Global.TotalConfirmed;\n              death = allCasesData.Global.TotalDeaths;\n              recovered = allCasesData.Global.TotalRecovered;\n            } else if (!isGlobalCasesMode && isAllCasesMode) {\n              confirmed = allCasesData.Global.NewConfirmed;\n              death = allCasesData.Global.NewDeaths;\n              recovered = allCasesData.Global.NewRecovered;\n            } else if (isGlobalCasesMode && !isAllCasesMode) {\n              confirmed = Math.round(allCasesData.Global.TotalConfirmed / worldPopulationPer100);\n              death = Math.round(allCasesData.Global.TotalDeaths / worldPopulationPer100);\n              recovered = Math.round(allCasesData.Global.TotalRecovered / worldPopulationPer100);\n            } else if (!isGlobalCasesMode && !isAllCasesMode) {\n              confirmed = Math.round(allCasesData.Global.NewConfirmed / worldPopulationPer100);\n              death = Math.round(allCasesData.Global.NewDeaths / worldPopulationPer100);\n              recovered = Math.round(allCasesData.Global.NewRecovered / worldPopulationPer100);\n            }\n\n            createCountryTable('World', 'assets/images/world-icon.png', confirmed, death, recovered);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getInfoTable() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getCurrentCountry = function getCurrentCountry() {\n  currentCountryData = countryCasesData.find(function (country) {\n    return currentCountry === country.country;\n  });\n};\n\nvar getCountryInfo = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee3() {\n    var confirmed, death, recovered;\n    return regenerator_default.a.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return getData();\n\n          case 2:\n            if (isCountryMode) {\n              _context3.next = 4;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 4:\n            if (isGlobalCasesMode && isAllCasesMode) {\n              confirmed = currentCountryData.cases;\n              death = currentCountryData.deaths;\n              recovered = currentCountryData.recovered;\n            } else if (!isGlobalCasesMode && isAllCasesMode) {\n              confirmed = currentCountryData.todayCases;\n              death = currentCountryData.todayDeaths;\n              recovered = currentCountryData.todayRecovered;\n            } else if (isGlobalCasesMode && !isAllCasesMode) {\n              confirmed = Math.round(currentCountryData.casesPerOneMillion / 10);\n              death = Math.round(currentCountryData.deathsPerOneMillion / 10);\n              recovered = Math.round(currentCountryData.recoveredPerOneMillion / 10);\n            } else if (!isGlobalCasesMode && !isAllCasesMode) {\n              confirmed = Math.round(currentCountryData.todayCases / currentCountryData.population * 100000);\n              death = Math.round(currentCountryData.todayDeaths / currentCountryData.population * 100000);\n              recovered = Math.round(currentCountryData.todayRecovered / currentCountryData.population * 100000);\n            }\n\n            createCountryTable(currentCountryData.country, currentCountryData.countryInfo.flag, confirmed, death, recovered);\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function getCountryInfo() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar createCountryTable = function createCountryTable(country, flag, confirmed, death, recovered) {\n  countryFlag.innerHTML = \"<img src=\\\"../\".concat(flag, \"\\\" class=\\\"flag__img\\\">\");\n  countryName.innerText = country;\n  tableConfirmed.innerText = confirmed;\n  tableDeath.innerText = death;\n  tableRecovered.innerText = recovered;\n}; //clean numbers\n\n\nvar cleanTable = function cleanTable() {\n  tableConfirmed.innerHTML = '';\n  tableDeath.innerHTML = '';\n  tableRecovered.innerHTML = '';\n};\n\nvar changeTableNameMode = function changeTableNameMode(firstMode, secondMode) {\n  firstMode.classList.toggle('hide');\n  secondMode.classList.toggle('hide');\n};\n\nvar changeTableArrows = function changeTableArrows(firstArrow, secondArrow) {\n  firstArrow.classList.toggle('unactive');\n  secondArrow.classList.toggle('unactive');\n}; //days swither right\n\n\narrowRightDays.addEventListener('click', function () {\n  if (isGlobalCasesMode) {\n    changeTableNameMode(tableGlobal, tableDaily);\n    changeTableArrows(arrowLeftDays, arrowRightDays);\n    isGlobalCasesMode = false;\n  }\n\n  cleanTable();\n  getInfoTable();\n  getCountryInfo();\n}); //days swither left\n\narrowLeftDays.addEventListener('click', function () {\n  if (!isGlobalCasesMode) {\n    changeTableNameMode(tableGlobal, tableDaily);\n    changeTableArrows(arrowLeftDays, arrowRightDays);\n    isGlobalCasesMode = true;\n  }\n\n  cleanTable();\n  getInfoTable();\n  getCountryInfo();\n}); //count swither right\n\narrowRightCount.addEventListener('click', function () {\n  if (isAllCasesMode) {\n    changeTableNameMode(tableAll, tablePer100);\n    changeTableArrows(arrowLeftCount, arrowRightCount);\n    isAllCasesMode = false;\n  }\n\n  cleanTable();\n  getInfoTable();\n  getCountryInfo();\n}); //count swither left\n\narrowLeftCount.addEventListener('click', function () {\n  if (!isAllCasesMode) {\n    changeTableNameMode(tableAll, tablePer100);\n    changeTableArrows(arrowLeftCount, arrowRightCount);\n    isAllCasesMode = true;\n  }\n\n  cleanTable();\n  getInfoTable();\n  getCountryInfo();\n}); //choose country for table\n\ncountries.addEventListener('click', function (event) {\n  cleanTable();\n  var target = event.target;\n\n  if (target.className !== 'country__name') {\n    currentCountry = currentCountry;\n  } else {\n    currentCountry = target.innerText;\n  }\n\n  isCountryMode = true;\n  getCurrentCountry();\n  getCountryInfo();\n}); //return to total cases\n\ntotalBtn.addEventListener('click', function () {\n  isCountryMode = false;\n  cleanTable();\n  getInfoTable();\n}); //add full Screen\n\nfullscreenTableBtn.addEventListener('click', function () {\n  if (!document.fullscreen) {\n    table.requestFullscreen();\n    fullscreenTableBtn.style.top = '0.5rem';\n    fullscreenTableBtn.style.right = '0.5rem';\n  } else {\n    document.exitFullscreen();\n    fullscreenTableBtn.style.top = '-0.4rem';\n    fullscreenTableBtn.style.right = '-0.4rem';\n  }\n\n  ;\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  getInfoTable();\n});\n// CONCATENATED MODULE: ./js/components/list.js\n\n\nvar fullscreenBtn = document.querySelector('.fullscreen__list');\nvar list = document.querySelector('.list');\nvar list_countries = document.querySelector('.countries');\nvar input = document.getElementById('search');\nvar daysMode = document.querySelector('.days__mode');\nvar countsMode = document.querySelector('.counts__mode');\nvar globalCases = document.querySelector('.global__cases');\nvar dailyCases = document.querySelector('.daily__cases');\nvar allCases = document.querySelector('.all__cases');\nvar thousandsCases = document.querySelector('.thousands__cases');\nvar arrowRight = document.querySelector('.arrow__right_list');\nvar arrowLeft = document.querySelector('.arrow__left_list');\nvar list_confirmed = document.querySelector('.confirmed');\nvar deaths = document.querySelector('.deaths');\nvar list_recovered = document.querySelector('.recovered');\nvar keyboardBtn = document.querySelector('.keyboard__btn');\nvar keyboardContainer = document.querySelector('.keyboardContainer');\nvar virtualKeyboard = document.querySelector('.virtual__keyboard');\nvar DATA;\nvar list_isGlobalCasesMode = true;\nvar list_isAllCasesMode = true;\nvar countClickArrow = 0;\nvar isConfirmedMode = true;\nvar isDeathCasesMode = false;\nvar isRecoveredMode = false;\nvar searchTerm = '';\nvar Keyboard = window.SimpleKeyboard[\"default\"];\nvar myKeyboard = new Keyboard({\n  onChange: function onChange(input) {\n    return _onChange(input);\n  },\n  useMouseEvents: true\n});\n\nvar fetchData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('https://corona.lmao.ninja/v2/countries').then(function (res) {\n              return res.json();\n            });\n\n          case 2:\n            DATA = _context.sent;\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchData() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar seachCountries = function seachCountries() {\n  DATA = DATA.filter(function (country) {\n    return country.country.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n};\n\nvar getInfo = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetchData();\n\n          case 2:\n            seachCountries();\n            DATA.forEach(function (country) {\n              if (country.country === 'MS Zaandam') {\n                country.population = 76804;\n              }\n\n              if (country.country === 'Diamond Princess') {\n                country.population = 28670;\n              }\n            });\n\n            if (list_isGlobalCasesMode && list_isAllCasesMode && isConfirmedMode) {\n              DATA.sort(function (a, b) {\n                return a.cases < b.cases ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                return createCards(country, country.cases);\n              });\n            } else if (!list_isGlobalCasesMode && list_isAllCasesMode && isConfirmedMode) {\n              DATA.sort(function (a, b) {\n                return a.todayCases < b.todayCases ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                return createCards(country, country.todayCases);\n              });\n            } else if (list_isGlobalCasesMode && !list_isAllCasesMode && isConfirmedMode) {\n              DATA.sort(function (a, b) {\n                return Math.round(a.casesPerOneMillion / 10) < Math.round(b.casesPerOneMillion / 10) ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                var totalConfirmedPer100 = Math.round(country.casesPerOneMillion / 10);\n                createCards(country, totalConfirmedPer100);\n              });\n            } else if (!list_isGlobalCasesMode && !list_isAllCasesMode && isConfirmedMode) {\n              DATA.sort(function (a, b) {\n                return Math.round(a.todayCases / a.population * 100000) < Math.round(b.todayCases / b.population * 100000) ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                var newConfirmedPer100 = Math.round(country.todayCases / country.population * 100000);\n                createCards(country, newConfirmedPer100);\n              });\n            } else if (list_isGlobalCasesMode && list_isAllCasesMode && isDeathCasesMode) {\n              DATA.sort(function (a, b) {\n                return a.deaths < b.deaths ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                return createCards(country, country.deaths);\n              });\n            } else if (!list_isGlobalCasesMode && list_isAllCasesMode && isDeathCasesMode) {\n              DATA.sort(function (a, b) {\n                return a.todayDeaths < b.todayDeaths ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                return createCards(country, country.todayDeaths);\n              });\n            } else if (list_isGlobalCasesMode && !list_isAllCasesMode && isDeathCasesMode) {\n              DATA.sort(function (a, b) {\n                return Math.round(a.deaths / a.population * 100000) < Math.round(b.deaths / b.population * 100000) ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                var totalDeathsPer100 = Math.round(country.deaths / country.population * 100000);\n                createCards(country, totalDeathsPer100);\n              });\n            } else if (!list_isGlobalCasesMode && !list_isAllCasesMode && isDeathCasesMode) {\n              DATA.sort(function (a, b) {\n                return Math.round(a.todayDeaths / a.population * 100000) < Math.round(b.todayDeaths / b.population * 100000) ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                var newDeathsPer100 = Math.round(country.todayDeaths / country.population * 100000);\n                createCards(country, newDeathsPer100);\n              });\n            } else if (list_isGlobalCasesMode && list_isAllCasesMode && isRecoveredMode) {\n              DATA.sort(function (a, b) {\n                return a.recovered < b.recovered ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                return createCards(country, country.recovered);\n              });\n            } else if (!list_isGlobalCasesMode && list_isAllCasesMode && isRecoveredMode) {\n              DATA.sort(function (a, b) {\n                return a.todayRecovered < b.todayRecovered ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                return createCards(country, country.todayRecovered);\n              });\n            } else if (list_isGlobalCasesMode && !list_isAllCasesMode && isRecoveredMode) {\n              DATA.sort(function (a, b) {\n                return Math.round(a.recovered / a.population * 100000) < Math.round(b.recovered / b.population * 100000) ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                var totalRecoveredPer100 = Math.round(country.recovered / country.population * 100000);\n                createCards(country, totalRecoveredPer100);\n              });\n            } else if (!list_isGlobalCasesMode && !list_isAllCasesMode && isRecoveredMode) {\n              DATA.sort(function (a, b) {\n                return Math.round(a.todayRecovered / a.population * 100000) < Math.round(b.todayRecovered / b.population * 100000) ? 1 : -1;\n              });\n              DATA.forEach(function (country) {\n                var newRecoveredPer100 = Math.round(country.todayRecovered / country.population * 100000);\n                createCards(country, newRecoveredPer100);\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getInfo() {\n    return _ref2.apply(this, arguments);\n  };\n}(); //create elemets\n\n\nvar createCards = function createCards(country, numbers) {\n  var countryContainer = document.createElement('div');\n  var countryInfo = document.createElement('div');\n  var countryFlag = document.createElement('div');\n  var countryName = document.createElement('div');\n  var countryCases = document.createElement('div');\n  countryContainer.className = 'country__container';\n  countryInfo.className = 'country__info';\n  countryFlag.className = 'country__flag';\n  countryName.className = 'country__name';\n  countryCases.className = 'country__cases';\n  countryName.innerText = country.country;\n  countryCases.innerText = numbers;\n  countryFlag.innerHTML = \"<img src=\\\"\".concat(country.countryInfo.flag, \"\\\" class=\\\"flag__img\\\">\");\n  list_countries.append(countryContainer);\n  countryContainer.append(countryInfo, countryCases);\n  countryInfo.append(countryFlag, countryName);\n};\n\nvar _onChange = function _onChange(input) {\n  document.querySelector(\".input\").value = input;\n  searchTerm = input;\n  list_countries.innerHTML = '';\n  getInfo();\n}; //change Switchers\n\n\nvar changeSwitcherModeBtn = function changeSwitcherModeBtn(firstMode, secondMode) {\n  firstMode.classList.toggle('hide');\n  secondMode.classList.toggle('hide');\n};\n\nvar changeSwitchersDaysMode = function changeSwitchersDaysMode() {\n  if (list_isGlobalCasesMode) {\n    list_isGlobalCasesMode = false;\n  } else {\n    list_isGlobalCasesMode = true;\n  }\n\n  changeSwitcherModeBtn(globalCases, dailyCases);\n};\n\nvar changeSwitchersCasesMode = function changeSwitchersCasesMode() {\n  if (list_isAllCasesMode) {\n    list_isAllCasesMode = false;\n  } else {\n    list_isAllCasesMode = true;\n  }\n\n  changeSwitcherModeBtn(allCases, thousandsCases);\n}; // add full Screen\n\n\nfullscreenBtn.addEventListener('click', function () {\n  if (!document.fullscreen) {\n    list.requestFullscreen();\n    virtualKeyboard.classList.add('fullscreen_keyb');\n    fullscreenBtn.style.top = '0.5rem';\n    fullscreenBtn.style.right = '0.5rem';\n  } else {\n    document.exitFullscreen();\n    virtualKeyboard.classList.remove('fullscreen_keyb');\n    fullscreenBtn.style.top = '-0.4rem';\n    fullscreenBtn.style.right = '-0.4rem';\n  }\n\n  ;\n});\ndaysMode.addEventListener('click', function () {\n  list_countries.innerHTML = '';\n  changeSwitchersDaysMode();\n  getInfo();\n});\ncountsMode.addEventListener('click', function () {\n  list_countries.innerHTML = '';\n  changeSwitchersCasesMode();\n  getInfo();\n}); //change indicators\n\narrowRight.addEventListener('click', function () {\n  if (countClickArrow === 0) {\n    list_confirmed.classList.add('hide');\n    deaths.classList.remove('hide');\n    arrowLeft.classList.remove('unactive');\n    countClickArrow = 1;\n    isConfirmedMode = false;\n    isDeathCasesMode = true;\n  } else if (countClickArrow === 1) {\n    deaths.classList.add('hide');\n    list_recovered.classList.remove('hide');\n    arrowRight.classList.add('unactive');\n    countClickArrow = 2;\n    isDeathCasesMode = false;\n    isRecoveredMode = true;\n  }\n\n  list_countries.innerHTML = '';\n  getInfo();\n});\narrowLeft.addEventListener('click', function () {\n  if (countClickArrow === 1) {\n    list_confirmed.classList.remove('hide');\n    deaths.classList.add('hide');\n    arrowLeft.classList.add('unactive');\n    countClickArrow = 0;\n    isDeathCasesMode = false;\n    isConfirmedMode = true;\n  } else if (countClickArrow === 2) {\n    deaths.classList.remove('hide');\n    list_recovered.classList.add('hide');\n    arrowRight.classList.remove('unactive');\n    countClickArrow = 1;\n    isDeathCasesMode = true;\n    isRecoveredMode = false;\n  }\n\n  list_countries.innerHTML = '';\n  getInfo();\n});\ninput.addEventListener('input', function (event) {\n  searchTerm = event.target.value;\n  list_countries.innerHTML = '';\n  getInfo();\n});\ndocument.querySelector(\".input\").addEventListener(\"input\", function (event) {\n  keyboard.setInput(event.target.value);\n});\nkeyboardBtn.addEventListener('click', function () {\n  keyboardContainer.classList.toggle('hide');\n});\ndocument.addEventListener('DOMContentLoaded', function () {\n  getInfo();\n});\n// CONCATENATED MODULE: ./js/components/chart.js\n\n\n\n/* eslint-disable no-undef */\nvar chartGlobal = document.getElementById('chart_global_id');\nvar globalCasesButton = document.querySelector('.chart__control_global');\nvar worldCases = document.querySelector('.chart__global');\nvar chartDaily = document.getElementById('chart_daily_id');\nvar dailyCasesButton = document.querySelector('.chart__control_daily');\nvar chartHundred = document.getElementById('chart_hundred_id');\nvar hundredCasesButton = document.querySelector('.chart__control_hundred');\nvar chartBtnContainer = document.querySelector('.chart__control');\nvar fullscreenChartBtn = document.querySelector('.fullscreen__chart');\nvar chart = document.querySelector('.chart');\nvar globalConfirmed = [];\nvar globalDeaths = [];\nvar globalRecovered = [];\nvar dateStage = [];\nvar rightDate = [];\nvar newConfirmed = [];\nvar lastDate = '';\nvar newRecovered = [];\nvar newDeaths = [];\nvar globalChartCreated;\nvar dailyChartCreated;\nvar hundredChartCreated;\nvar isShowChart = true;\nvar isHundredChart = true;\nvar chart_worldPopulationPer100 = 78270;\nvar globalHundredConfirmed = [];\nvar globalHundredDeaths = [];\nvar globalHundredRecovered = [];\nvar todayHundredConfirmed = [];\nvar todayHundredDeaths = [];\nvar todayHundredRecovered = [];\nvar monthsNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\nvar formattedDate = function formattedDate(parseDate) {\n  var date = new Date(parseDate);\n  return \"\".concat(date.getDate(), \" \").concat(monthsNames[date.getMonth()]);\n};\n\nvar sortData = function sortData() {\n  globalConfirmed.sort(function (a, b) {\n    return a - b;\n  });\n  globalDeaths.sort(function (a, b) {\n    return a - b;\n  });\n  globalRecovered.sort(function (a, b) {\n    return a - b;\n  });\n  globalHundredConfirmed.sort(function (a, b) {\n    return a - b;\n  });\n  globalHundredDeaths.sort(function (a, b) {\n    return a - b;\n  });\n  globalHundredRecovered.sort(function (a, b) {\n    return a - b;\n  });\n  todayHundredConfirmed.sort(function (a, b) {\n    return a - b;\n  });\n  todayHundredDeaths.sort(function (a, b) {\n    return a - b;\n  });\n  todayHundredRecovered.sort(function (a, b) {\n    return a - b;\n  });\n  dateStage.sort();\n  dateStage.forEach(function (el) {\n    rightDate.push(formattedDate(el));\n  });\n};\n\nvar globalChartAction = function globalChartAction() {\n  if (!isShowChart || !isHundredChart) {\n    chartDaily.classList.remove('active');\n    worldCases.classList.add('active');\n    chartHundred.classList.remove('active');\n    isShowChart = true;\n    isHundredChart = true;\n  }\n};\n\nvar dailyChartAction = function dailyChartAction() {\n  if (isShowChart || !isHundredChart) {\n    worldCases.classList.remove('active');\n    chartDaily.classList.add('active');\n    chartHundred.classList.remove('active');\n    isShowChart = false;\n    isHundredChart = true;\n  }\n};\n\nvar createDailyChart = function createDailyChart() {\n  dailyChartCreated = new Chart(chartDaily, {\n    type: 'doughnut',\n    data: {\n      datasets: [{\n        label: 'Today`s Chart',\n        backgroundColor: ['#3e95cd', '#8e5ea2', '#3cba9f'],\n        data: [newConfirmed, newRecovered, newDeaths]\n      }],\n      labels: ['New Confirmed', 'New Recovered', 'New Deaths']\n    },\n    options: {\n      title: {\n        display: true,\n        text: \"Today`s Cases: \".concat(lastDate)\n      },\n      responsive: true,\n      maintainAspectRatio: false\n    }\n  });\n  return dailyChartCreated;\n};\n\nvar hundredChartAction = function hundredChartAction() {\n  if (isHundredChart) {\n    worldCases.classList.remove('active');\n    chartDaily.classList.remove('active');\n    chartHundred.classList.add('active');\n    isHundredChart = false;\n  }\n};\n\nvar createHundredChart = function createHundredChart() {\n  hundredChartCreated = new Chart(chartHundred, {\n    type: 'line',\n    data: {\n      datasets: [{\n        label: 'Global Per 100 Confirmed',\n        data: globalHundredConfirmed,\n        fill: false,\n        borderColor: '#3e95cd',\n        backgroundColor: '#3e95cd',\n        borderWidth: 1\n      }, {\n        label: 'Global Per 100 Recovered',\n        data: globalHundredRecovered,\n        fill: false,\n        borderColor: '#8e5ea2',\n        backgroundColor: '#8e5ea2',\n        borderWidth: 1\n      }, {\n        label: 'Global Per 100 Deaths',\n        data: globalHundredDeaths,\n        fill: false,\n        borderColor: 'red',\n        backgroundColor: 'red',\n        borderWidth: 1\n      }, {\n        label: 'Today Per 100 Confirmed',\n        data: todayHundredConfirmed,\n        fill: false,\n        borderColor: 'black',\n        backgroundColor: 'black',\n        borderWidth: 1\n      }, {\n        label: 'Today Per 100 Recovered',\n        data: todayHundredRecovered,\n        fill: false,\n        borderColor: 'blue',\n        backgroundColor: 'blue',\n        borderWidth: 1\n      }, {\n        label: 'Today Per 100 Deaths',\n        data: todayHundredDeaths,\n        fill: false,\n        borderColor: '#3cba9f',\n        backgroundColor: '#3cba9f',\n        borderWidth: 1\n      }],\n      labels: rightDate\n    },\n    options: {\n      legend: {\n        display: true,\n        position: 'top',\n        labels: {\n          boxWidth: 20,\n          fontSize: 11,\n          fontColor: 'darkslategray'\n        }\n      },\n      responsive: true,\n      maintainAspectRatio: false\n    }\n  });\n  return hundredChartCreated;\n};\n\nvar chart_covidData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee() {\n    var response, covidApiData, data;\n    return regenerator_default.a.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('https://corona-api.com/timeline');\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            covidApiData = _context.sent;\n            data = covidApiData.data;\n            data.forEach(function (el) {\n              dateStage.push(el.date);\n              globalConfirmed.push(el.confirmed);\n              globalDeaths.push(el.deaths);\n              globalRecovered.push(el.recovered);\n              globalHundredConfirmed.push(Math.round(el.confirmed / chart_worldPopulationPer100));\n              globalHundredDeaths.push(Math.round(el.deaths / chart_worldPopulationPer100));\n              globalHundredRecovered.push(Math.round(el.recovered / chart_worldPopulationPer100));\n              todayHundredConfirmed.push(Math.round(el.new_confirmed / chart_worldPopulationPer100));\n              todayHundredDeaths.push(Math.round(el.new_deaths / chart_worldPopulationPer100));\n              todayHundredRecovered.push(Math.round(el.new_recovered / chart_worldPopulationPer100));\n            });\n            newConfirmed.push(data[0].new_confirmed);\n            newRecovered.push(data[0].new_recovered);\n            newDeaths.push(data[0].new_deaths);\n            lastDate += data[0].date;\n            sortData();\n            createDailyChart();\n            createHundredChart();\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function covidData() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar chartButtonActive = function chartButtonActive(event) {\n  var targetBtn = event.target;\n  var activeBtn = document.querySelector('.open');\n\n  if (targetBtn.getAttribute('class') === 'chart__control') {\n    return;\n  }\n\n  if (activeBtn !== null) {\n    activeBtn.classList.remove('open');\n  }\n\n  targetBtn.classList.add('open');\n};\n\nvar createGlobalChart = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regenerator_default.a.mark(function _callee2() {\n    return regenerator_default.a.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            worldCases.classList.add('active');\n            _context2.next = 3;\n            return chart_covidData();\n\n          case 3:\n            globalChartCreated = new Chart(chartGlobal, {\n              type: 'line',\n              data: {\n                datasets: [{\n                  label: 'Global Confirmed',\n                  data: globalConfirmed,\n                  fill: false,\n                  borderColor: '#3e95cd',\n                  backgroundColor: '#3e95cd',\n                  borderWidth: 1\n                }, {\n                  label: 'Global Recovered',\n                  data: globalRecovered,\n                  fill: false,\n                  borderColor: '#8e5ea2',\n                  backgroundColor: '#8e5ea2',\n                  borderWidth: 1\n                }, {\n                  label: 'Global Deaths',\n                  data: globalDeaths,\n                  fill: false,\n                  borderColor: '#3cba9f',\n                  backgroundColor: '#3cba9f',\n                  borderWidth: 1\n                }],\n                labels: rightDate\n              },\n              options: {\n                legend: {\n                  display: true,\n                  position: 'top',\n                  labels: {\n                    boxWidth: 50,\n                    fontColor: 'black'\n                  }\n                },\n                scales: {\n                  yAxes: [{\n                    ticks: {\n                      beginAtZero: true\n                    }\n                  }]\n                },\n                responsive: true,\n                maintainAspectRatio: false\n              }\n            });\n            return _context2.abrupt(\"return\", globalChartCreated);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function createGlobalChart() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfullscreenChartBtn.addEventListener('click', function () {\n  if (!document.fullscreen) {\n    chart.requestFullscreen();\n    fullscreenChartBtn.style.top = '0.5rem';\n    fullscreenChartBtn.style.right = '0.5rem';\n  } else {\n    document.exitFullscreen();\n    fullscreenChartBtn.style.top = '-0.4rem';\n    fullscreenChartBtn.style.right = '-0.4rem';\n  }\n\n  ;\n});\nglobalCasesButton.addEventListener('click', function () {\n  return globalChartAction();\n});\ndailyCasesButton.addEventListener('click', function () {\n  return dailyChartAction();\n});\nhundredCasesButton.addEventListener('click', function () {\n  return hundredChartAction();\n});\nchartBtnContainer.addEventListener('click', function (event) {\n  return chartButtonActive(event);\n});\ncreateGlobalChart();\n// CONCATENATED MODULE: ./js/index.js\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")}]);